{"componentChunkName":"component---src-templates-index-template-js","path":"/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><img src=\"https://www.linuxmaker.com/fileadmin/user_upload/Images/letsencrypt.png\" alt=\"logo\"></p>\n<p>In this post, we will see how we can secure our site using SSL certificate using Let’s Encrypt. It’s known that SSL/TLS encryption of your website leads to higher search rankings and better security for your users. However, there are a number of barriers that have prevented website owners from adopting SSL such as the cost and the manual processes involved in getting a certificate.</p>\n<p>With Let’s Encrypt, they are no longer a concern. Let’s Encrypt makes SSL/TLS encryption freely available to everyone.</p>\n<p>Before we dive in , Let’s understand what Let’s encrypt it. Let’s Encrypt is a free, automated, and open certificate authority (CA). and are trusted by most browsers today. In addition, Let’s Encrypt fully automates both issuing and renewing of certificates. WOW - Isn’t that exciting ??</p>\n<p><strong>Prerequisites</strong></p>\n<ol>\n<li>Any webserver like Apache , NGINX. (In this article, we will be using NGINX)</li>\n<li>Own a custom domain.</li>\n<li>Create a DNS record (A record) that associates your domain name and your server’s public IP address.</li>\n</ol>\n<p>Let’s get started.</p>\n<h4 id=\"install-and-configure-nginx\" style=\"position:relative;\"><a href=\"#install-and-configure-nginx\" aria-label=\"install and configure nginx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install and Configure NGINX</h4>\n<p>Please refer to the documentation outlined <a href=\"http://nginx.org/en/linux_packages.html\">here</a></p>\n<p>I am using Ubuntu so it’s as easy as executing the below command:</p>\n<pre><code class=\"language-bash\">sudo apt install nginx\n</code></pre>\n<p>Check if service is running</p>\n<pre><code class=\"language-bash\">sudo service nginx status\n</code></pre>\n<p>Output:</p>\n<pre><code>durgadas@dk:~$ sudo service nginx status\n● nginx.service - A high performance web server and a reverse proxy server\n     Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)\n     Active: active (running) since Sat 2021-05-22 16:13:25 UTC; 16h ago\n       Docs: man:nginx(8)\n    Process: 1359 ExecStartPre=/usr/sbin/nginx -t -q -g daemon on; master_process on; (code=exited, status=0/SUCCESS)\n    Process: 1370 ExecStart=/usr/sbin/nginx -g daemon on; master_process on; (code=exited, status=0/SUCCESS)\n   Main PID: 1371 (nginx)\n      Tasks: 3 (limit: 1117)\n     Memory: 4.3M\n     CGroup: /system.slice/nginx.service\n             ├─1371 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;\n             ├─1421 nginx: worker process\n             └─1422 nginx: worker process\n\nMay 22 16:13:25 vm-1 systemd[1]: Starting A high performance web server and a reverse proxy server...\nMay 22 16:13:25 vm-1 systemd[1]: Started A high performance web server and a reverse proxy server.\n</code></pre>\n<p><strong>Configuration</strong></p>\n<p>In the following file <code>/etc/nginx/sites-available/default</code> , update the value aginst the server_name to the domain-name you own.</p>\n<pre><code class=\"language-bash\">server{\n  .......\n    server_name cert.durgadas.in;\n  .......\n}\n</code></pre>\n<p>Once done restart the nginx using <code>service nginx restart</code></p>\n<h4 id=\"create-dns-record-and-verify-the-site\" style=\"position:relative;\"><a href=\"#create-dns-record-and-verify-the-site\" aria-label=\"create dns record and verify the site permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Create DNS Record and Verify the Site</h4>\n<ol>\n<li>Create ‘A’ record in your DNS setting to point to the Server where you have NGINX installed.</li>\n<li>Hit your domain in the browser and verify that the NGINX page is displayed with “Non Secure”</li>\n</ol>\n<p><img src=\"/media/ssl-letsencrypt/non-secure.png\" alt=\"nonsecure\"></p>\n<h4 id=\"install-certbot-client\" style=\"position:relative;\"><a href=\"#install-certbot-client\" aria-label=\"install certbot client permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Install CertBot Client</h4>\n<p>Visit the certbot site : <a href=\"https://certbot.eff.org/\">https://certbot.eff.org/</a> to install the client based on your OS and Server.</p>\n<p>As we are using Ubuntu, we can install using the following command</p>\n<pre><code class=\"language-bash\">sudo snap install --classic certbot\n</code></pre>\n<h4 id=\"obtain-ssl-certificate-from-lets-encrypt\" style=\"position:relative;\"><a href=\"#obtain-ssl-certificate-from-lets-encrypt\" aria-label=\"obtain ssl certificate from lets encrypt permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Obtain SSL Certificate from Let’s Encrypt/</h4>\n<pre><code>sudo cerbot --nginx -d cert.durgadas.in   ##replace cert.durgadas.in with your domain name\n</code></pre>\n<p>In the process, you will be requested for certain information like email , consent to register with ACME etc.</p>\n<p>Output:</p>\n<pre><code>durgadas@dk:~# sudo certbot --nginx -d cert.durgadas.in\nSaving debug log to /var/log/letsencrypt/letsencrypt.log\nPlugins selected: Authenticator nginx, Installer nginx\nEnter email address (used for urgent renewal and security notices)\n (Enter 'c' to cancel): xxxxxxxxxx\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nPlease read the Terms of Service at\nhttps://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must\nagree in order to register with the ACME server. Do you agree?\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(Y)es/(N)o: Y\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nWould you be willing, once your first certificate is successfully issued, to\nshare your email address with the Electronic Frontier Foundation, a founding\npartner of the Let's Encrypt project and the non-profit organization that\ndevelops Certbot? We'd like to send you email about our work encrypting the web,\nEFF news, campaigns, and ways to support digital freedom.\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n(Y)es/(N)o: N\nAccount registered.\nRequesting a certificate for cert.durgadas.in\nPerforming the following challenges:\nhttp-01 challenge for cert.durgadas.in\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/default\nRedirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/default\n\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCongratulations! You have successfully enabled https://cert.durgadas.in\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n</code></pre>\n<h4 id=\"verify-site\" style=\"position:relative;\"><a href=\"#verify-site\" aria-label=\"verify site permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Verify Site</h4>\n<p><img src=\"/media/ssl-letsencrypt/secure.png\" alt=\"secure\"></p>\n<h4 id=\"automatically-renew-lets-encrypt-certificates\" style=\"position:relative;\"><a href=\"#automatically-renew-lets-encrypt-certificates\" aria-label=\"automatically renew lets encrypt certificates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Automatically Renew Let’s Encrypt Certificates</h4>\n<p>Let’s Encrypt certificates expire after 90 days. We can renew the certificates automatically by adding the below to crontab.</p>\n<p><code>0 12 * * * /usr/bin/certbot renew --quiet</code></p>\n<p>Conclusion:\nWe saw in this article how quickly we can setup SSL certificates for our domains in short time. Hope you loved it. Do share your thoughts.</p>\n<p>Happy Learning.</p>","fields":{"slug":"/ssl-lets-encrypt","categorySlug":"/category/security","tagSlugs":["/tag/letsencrypt","/tag/secured"]},"frontmatter":{"title":"SSL using Let's Encrypt","date":"2021-05-23T12:00:02.039Z","tags":["letsencrypt","secured"],"category":"security","description":"Non-Secure to Secure using Lets Encrypt with automated renewal","priority":5}}},{"node":{"html":"<p><img src=\"/media/api-doc/pexel-doc.jpg\" alt=\"markdown-format\"></p>\n<p>I have been into Backend development for most of my development experience - be it either Java , Node or NestJS. Documentation is always an important aspect which many developments tend to ignore. While it’s important to implement the API the correct way , it’s also important to document it in a way that can be understood by the consumers of your API.</p>\n<p>I understand that developer find documentation boring and I was one among them several years back :-) .</p>\n<blockquote>\n<p>Documentation is a love letter that you write to your future self. - Damian Conway</p>\n</blockquote>\n<p>For most of my early days and even today, Swagger is one of the ways but it does have a learning curve.\nPostman tool is what I have been using lately for testing my developed REST APIs and in these years, Postman has evolved and have added bunch of features including Documentation.</p>\n<p>Documenting using Postman is very simple and you can just create your collections , add APIs (with name, description) and can quickly publish documentation by right clicking and clicking on publish. For this post, you don’t need to publish. Just follow the below steps:</p>\n<p><strong>1. Export the Postman collection</strong></p>\n<p>Click on the 3 dots (…) against your collection and select ‘Export’. Select the recommended version , directory and submit.</p>\n<p><img src=\"/media/api-doc/export-collection.gif\" alt=\"export-collection\"></p>\n<p><strong>2. Install docgen</strong></p>\n<p>docgen (<a href=\"https://github.com/thedevsaddam/docgen\">https://github.com/thedevsaddam/docgen</a>) is a tool (MIT license) that helps to transform the postman collections into formats like HTML and Markdown.</p>\n<p>On Mac , you can follow the below steps:</p>\n<pre><code class=\"language-bash\">curl https://raw.githubusercontent.com/thedevsaddam/docgen/v3/install.sh -o install.sh \\\n&#x26;&#x26; sudo chmod +x install.sh \\\n&#x26;&#x26; sudo ./install.sh \\\n&#x26;&#x26; rm install.sh\n</code></pre>\n<p>On windows, Download the library from <a href=\"https://github.com/thedevsaddam/docgen/releases\">here</a></p>\n<p><strong>3. Generate HTML and Markdown files from Postman collection exported in step 1</strong></p>\n<p>For HTML: <code>docgen build -i &#x3C;path_to_postman_collection> -o &#x3C;file_name.html></code></p>\n<p>For Markdown: <code>docgen build -i &#x3C;path_to_postman_collection> -o &#x3C;file_name.md> -m</code></p>\n<script src=\"https://asciinema.org/a/414575.js\" id=\"asciicast-414575\" async data-autoplay=\"true\"  width=\"600\" height=\"300\"></script>\n<p><strong>4.Use the generated files</strong></p>\n<p>If you have named the output file as <code>index.html</code> , then you could simply put it in public folder of your API or at a path which is been called from the base route.</p>\n<ul>\n<li>\n<p>HTML Output</p>\n<p><img src=\"/media/api-doc/html-format.png\" alt=\"html-format\"></p>\n</li>\n<li>\n<p>Markdown Output</p>\n<p><img src=\"/media/api-doc/markdown-format.png\" alt=\"markdown-format\"></p>\n</li>\n</ul>\n<p>This is one of the easiest way we could get REST API documentation done. It has some limitation, but its easy to go and you don’t have to do much to get the documentation done.\nJust one thing that’s missing and would be great to have is the ability to specify enviornment details so that one could directly invoke the API as we can in Swagger.</p>\n<p>Let me know your thoughts and other options when it comes to API documentation. Thanks and Happy Learning !!!</p>","fields":{"slug":"/api-doc","categorySlug":"/category/documentation","tagSlugs":["/tag/restapi","/tag/docgen","/tag/postman"]},"frontmatter":{"title":"Document API using docgen","date":"2021-05-17T12:00:02.039Z","tags":["restapi","docgen","postman"],"category":"documentation","description":"Generate REST API documentation in HTML and Markdown format from Postman Collection","priority":0}}},{"node":{"html":"<p><img src=\"https://www.krakend.io/images/krakend-waves.png\" alt=\"logo\"></p>\n<p>In this article, I will touch upon KrakenD which is a modern open source API Gateway return in Go Lang. Before, we dive into its capabilities, let’s first understand what an API Gateway is.</p>\n<p>An <strong>API Gateway</strong> is a an entry point for the clients to your microservices. It takes all API calls from clients, then routes them to the appropriate microservice with request routing, composition, and protocol translation. Typically it handles a request by invoking multiple microservices and aggregating the results, to determine the best path. An e‑commerce site might use an API gateway to provide mobile clients with an endpoint for retrieving all product details with a single request. It invokes various services, like product info and reviews, and combines the results.</p>\n<p>KrakenD is a ‘Pure API Gateway’ and running a benchmark tests across test conditions , KrakenD outperformed competitors like Kong, Vulcand, Tyk thanks to its stateless architecture (benchmark links are mentioned in below sections). It sits between the client and all the source servers, adding a new layer that removes all the complexity to the clients, providing them only the information that the UI needs.</p>\n<h3 id=\"features-of-krakend\" style=\"position:relative;\"><a href=\"#features-of-krakend\" aria-label=\"features of krakend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features of KrakenD</h3>\n<ul>\n<li>Aggregates information from many sources into single endpoints.</li>\n<li>Manipulates responses and allows you to group, wrap, rename…</li>\n<li>Filters and shrinks responses, hiding unwanted attributes or selecting them</li>\n<li>Throttles (rate limits) connections against KrakenD and against backends</li>\n<li>Protects your backends with circuit breakers and implements all kinds of security measures.</li>\n<li>Discovers your service instances by integrating with your SD provider</li>\n<li>Extends your ecosystem as it supports a myriad of middlewares and plugins, such as OAuth or security layers.</li>\n<li>Fine control of manipulations, validations and filtering with DSL configurations</li>\n</ul>\n<p><img src=\"https://www.krakend.io/images/KrakendFlow.png\" alt=\"features\"> <em>Source : <a href=\"https://www.krakend.io/\">https://www.krakend.io/</a></em></p>\n<h3 id=\"why-krakend-\" style=\"position:relative;\"><a href=\"#why-krakend-\" aria-label=\"why krakend  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Why KrakenD ?</h3>\n<ul>\n<li>Increase user experience in apps. Less data consumption and faster responses</li>\n<li>Instant creation of a new REST API</li>\n<li>Add APIs in legacy systems</li>\n<li>Unify data coming from different sources and encodings</li>\n<li>Publish a fixed interface, let the backends evolve and change contracts.</li>\n<li>Quick Microservices adoption</li>\n<li>Create aggregated views from a lot of services</li>\n<li>Smooth transition over different API version releases</li>\n</ul>\n<h3 id=\"performance-benchmarks\" style=\"position:relative;\"><a href=\"#performance-benchmarks\" aria-label=\"performance benchmarks permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Performance Benchmarks</h3>\n<p>Performance is where KrakenD just outperforms all its competitors. Even on an ordinary laptop , it’s able to serve ~18,000 requests/second.</p>\n<p>Krakend team has done a good job at performing various benchmarking tests and making the results available. You can find it <a href=\"https://www.krakend.io/docs/benchmarks/overview/\">here</a> . Detailed benchmark results <a href=\"https://www.krakend.io/docs/benchmarks/api-gateway-benchmark/\">here</a></p>\n<h4 id=\"conlusion\" style=\"position:relative;\"><a href=\"#conlusion\" aria-label=\"conlusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conlusion</h4>\n<p>If you are building applications those are cloud-native and rely on microservices pattern then you will have to depend on a reliable API Gateway. There are tons of Open source offerings available in this space namely Kong, Tyk etc also managed service which do serve the purpose but are not so well placed when it comes to Performance.</p>\n<p>I always feel that the best comes out when you host it within your own ecosystem / environment and that’s where KrakenD just stood out. It was flexible, easy to configure and most importantly 0 <strong>Good Performance</strong>. It offers incredible features out of the box (as mentioned above) along with good performance and security.</p>\n<p>I am impressed and soon will be pubishing another post where we will see how to deploy KrakenD within Kubernetes (local laptop) and explore various features, designers etc.</p>\n<p>Please let me know your thoughts on the same.</p>","fields":{"slug":"/api-gateway-krakend","categorySlug":"/category/technical","tagSlugs":["/tag/api","/tag/gateway","/tag/krakend"]},"frontmatter":{"title":"KrakenD - Ultra-High Performance API Gateway","date":"2021-05-16T12:00:02.039Z","tags":["api","gateway","krakend"],"category":"technical","description":"Modern Opensource API Gateway offering lot of features, security with no compromise on Performance","priority":0}}}]}},"pageContext":{"allCategories":[{"fieldValue":"documentation","totalCount":1,"categoryColor":"pink-600"},{"fieldValue":"security","totalCount":1,"categoryColor":"green-600"},{"fieldValue":"technical","totalCount":1,"categoryColor":"indigo-600"}],"currentPage":0,"postsLimit":20,"postsOffset":0,"prevPagePath":"/","nextPagePath":"/page/1","hasPrevPage":false,"hasNextPage":false}},"staticQueryHashes":["2052939023","251939775","401334301"]}